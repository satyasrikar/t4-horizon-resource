package com.resource.horizon

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.resource.horizon.model.Motor
import com.resource.horizon.repository.MotorRepository
import com.resource.horizon.service.MotorService
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.junit.runner.RunWith
import org.mockito.Mockito
import org.mockito.Mockito.*
import org.mockito.MockitoAnnotations
import org.mockito.junit.MockitoJUnitRunner
import org.mockito.junit.jupiter.MockitoExtension
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.test.mock.mockito.MockBean
import org.springframework.http.MediaType
import org.springframework.test.context.event.annotation.BeforeTestClass
import org.springframework.test.context.junit.jupiter.SpringExtension
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.post
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders
import org.springframework.test.web.servlet.result.MockMvcResultMatchers
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import org.springframework.web.context.WebApplicationContext

@SpringBootTest
@AutoConfigureMockMvc
@ExtendWith(SpringExtension::class, MockitoExtension::class)
@RunWith(
    MockitoJUnitRunner::class)
class ResourceControllerTests {

    @Autowired
    private lateinit var mockMvc: MockMvc

    @MockBean
    lateinit var motorRepository: MotorRepository

    @Autowired
    lateinit var motorService :MotorService

    @Autowired
    lateinit var userService: MotorService

    @Autowired
    private val context: WebApplicationContext? = null

    var mapper = ObjectMapper()

    @BeforeTestClass
    fun setUp() {
        mockMvc = MockMvcBuilders.webAppContextSetup(context!!).build()
        MockitoAnnotations.initMocks(this)
    }

    @Test
    fun addNewMotorTest() {
        val motorObj = Motor(
            "MOTR0001",
            "MotorMake",
            "MotorModel"
        )
        val jsonRequest = mapper.writeValueAsString(motorObj)
        Mockito.`when`(motorRepository.save(motorObj)).thenReturn(motorObj)
        val result = mockMvc.perform(
            MockMvcRequestBuilders.post("/v1/store/motors").content(jsonRequest)
                .header("Content-Type", "application/json")
        ).andExpect(MockMvcResultMatchers.status().isOk).andReturn()
        Assertions.assertEquals(200, result.response.status)
    }


}